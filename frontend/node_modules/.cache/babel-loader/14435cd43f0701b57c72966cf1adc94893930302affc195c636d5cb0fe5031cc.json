{"ast":null,"code":"import { token, groupId, baseUrl } from \"../utils/constants\";\nclass Api {\n  constructor({\n    address,\n    groupId,\n    token\n  }) {\n    this._address = address;\n    this._groupId = groupId;\n    this._token = token;\n  }\n  _getHeaders() {\n    return {\n      Authorization: this._token,\n      \"Content-Type\": \"application/json\"\n    };\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Error: ${res.status}`);\n  }\n  getUserInfo() {\n    return fetch(`${this._address}${this._groupId}/users/me`, {\n      method: \"GET\",\n      headers: this._getHeaders()\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n  getInitialCards() {\n    return fetch(`${this._address}${this._groupId}/cards`, {\n      method: \"GET\",\n      headers: this._getHeaders()\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n  editProfile(userData) {\n    return fetch(`${this._address}${this._groupId}/users/me`, {\n      method: \"PATCH\",\n      headers: this._getHeaders(),\n      body: JSON.stringify({\n        name: userData.nameUser,\n        about: userData.about\n      })\n    }).then(this._checkResponse);\n  }\n  addNewCard(cardData) {\n    return fetch(`${this._address}${this._groupId}/cards`, {\n      method: \"POST\",\n      headers: this._getHeaders(),\n      body: JSON.stringify({\n        name: cardData.name,\n        link: cardData.link\n      })\n    }).then(this._checkResponse);\n  }\n  async deleteCard(cardId) {\n    return fetch(`${this._address}${this._groupId}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._getHeaders()\n    }).then(this._checkResponse);\n  }\n  changeLikeCardStatus(cardId, isLiked) {\n    return fetch(`${this._address}${this._groupId}/cards/likes/${cardId}`, {\n      method: isLiked ? \"PUT\" : \"DELETE\",\n      headers: this._getHeaders()\n    }).then(this._checkResponse);\n  }\n  updateAvatar(userData) {\n    return fetch(`${this._address}${this._groupId}/users/me/avatar/`, {\n      method: \"PATCH\",\n      headers: this._getHeaders(),\n      body: JSON.stringify({\n        avatar: userData\n      })\n    }).then(this._checkResponse);\n  }\n}\nconst api = new Api({\n  address: baseUrl,\n  groupId: groupId,\n  token: token\n});\nexport default api;","map":{"version":3,"names":["token","groupId","baseUrl","Api","constructor","address","_address","_groupId","_token","_getHeaders","Authorization","_checkResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","method","headers","then","getInitialCards","editProfile","userData","body","JSON","stringify","name","nameUser","about","addNewCard","cardData","link","deleteCard","cardId","changeLikeCardStatus","isLiked","updateAvatar","avatar","api"],"sources":["C:/Users/eduar/Documents/Tripleten/web_project_api_full/frontend/src/utils/api.js"],"sourcesContent":["import { token, groupId, baseUrl } from \"../utils/constants\";\r\n\r\nclass Api {\r\n  constructor({ address, groupId, token }) {\r\n    this._address = address;\r\n    this._groupId = groupId;\r\n    this._token = token;\r\n  }\r\n\r\n  _getHeaders() {\r\n    return {\r\n      Authorization: this._token,\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n  }\r\n\r\n  _checkResponse(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`Error: ${res.status}`);\r\n  }\r\n\r\n  getUserInfo() {\r\n    return fetch(`${this._address}${this._groupId}/users/me`, {\r\n      method: \"GET\",\r\n      headers: this._getHeaders(),\r\n    }).then((res) => {\r\n      return this._checkResponse(res);\r\n    });\r\n  }\r\n\r\n  getInitialCards() {\r\n    return fetch(`${this._address}${this._groupId}/cards`, {\r\n      method: \"GET\",\r\n      headers: this._getHeaders(),\r\n    }).then((res) => {\r\n      return this._checkResponse(res);\r\n    });\r\n  }\r\n\r\n  editProfile(userData) {\r\n    return fetch(`${this._address}${this._groupId}/users/me`, {\r\n      method: \"PATCH\",\r\n      headers: this._getHeaders(),\r\n      body: JSON.stringify({\r\n        name: userData.nameUser,\r\n        about: userData.about,\r\n      }),\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  addNewCard(cardData) {\r\n    return fetch(`${this._address}${this._groupId}/cards`, {\r\n      method: \"POST\",\r\n      headers: this._getHeaders(),\r\n      body: JSON.stringify({\r\n        name: cardData.name,\r\n        link: cardData.link,\r\n      }),\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  async deleteCard(cardId) {\r\n    return fetch(`${this._address}${this._groupId}/cards/${cardId}`, {\r\n      method: \"DELETE\",\r\n      headers: this._getHeaders(),\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  changeLikeCardStatus(cardId, isLiked) {\r\n    return fetch(`${this._address}${this._groupId}/cards/likes/${cardId}`, {\r\n      method: isLiked ? \"PUT\" : \"DELETE\",\r\n      headers: this._getHeaders(),\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  updateAvatar(userData) {\r\n    return fetch(`${this._address}${this._groupId}/users/me/avatar/`, {\r\n      method: \"PATCH\",\r\n      headers: this._getHeaders(),\r\n      body: JSON.stringify({ avatar: userData }),\r\n    }).then(this._checkResponse);\r\n  }\r\n}\r\n\r\nconst api = new Api({\r\n  address: baseUrl,\r\n  groupId: groupId,\r\n  token: token,\r\n});\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}